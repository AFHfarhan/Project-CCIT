using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using System.Collections;

namespace CCITLibrary
{

    public partial class Buku : Form
    {
        public Buku()
        {
            InitializeComponent();
            cbxBahasa.Items.Add("-- Pilih Bahasa --");
            cbxBahasa.Items.Add("Bahasa Indonesia");
            cbxBahasa.Items.Add("English");
            cbxBahasa.SelectedIndex = 0;

            cbxBahasa_edit.Items.Add("Bahasa Indonesia");
            cbxBahasa_edit.Items.Add("English");
        }

        Koneksi conn = new Koneksi();
        SqlConnection koneksi;
        SqlDataAdapter adapter = new SqlDataAdapter();
        DataSet ds = new DataSet();
        string sql = null;
        DataView dv;


        private void Buku_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'cCIT_LibraryDataSet2.tb_Kategori' table. You can move, or remove it, as needed.
            this.tb_KategoriTableAdapter.Fill(this.cCIT_LibraryDataSet2.tb_Kategori);
            // TODO: This line of code loads data into the 'cCIT_LibraryDataSet1.tb_Rak' table. You can move, or remove it, as needed.
            this.tb_RakTableAdapter.Fill(this.cCIT_LibraryDataSet1.tb_Rak);
            AutoGeneratedID buku = new AutoGeneratedID();
            string bukuu = buku.AutoIDBuku();
            txtId_Buku.Text = bukuu;
            txtId_Buku.Enabled = false;

            AutoGeneratedID buku1 = new AutoGeneratedID();
            string katbuku = buku1.AutoIDKategoriBuku();
            txtIDKatBuk.Text = katbuku;
            txtIDKatBuk.Enabled = false;
            txtkat_hapus.Enabled = false;
            hapus_edit();
            hapusedit();
            hapus_kat();
            hapusbuku();

            AutoGeneratedID buku2 = new AutoGeneratedID();
            string katrak = buku2.AutoIDRakBuku();
            txtIDRakBuk.Text = katrak;
            txtIDRakBuk.Enabled = false;
            textBox11.Enabled = false;
            textBox12.Enabled = true;
            button11.Enabled = true;
            button12.Enabled = true;
            textBox15.Enabled = false;
            textBox16.Enabled = true;
            button19.Enabled = false;
            button20.Enabled = false;

            ambilkat();
            ambilrak();
            ambilkatedit();
            ambilrakedit();
            cekidkatedit();
            cekidrakedit();

            try
            {
                koneksi = conn.con();
                koneksi.Open();
                sql = "select * from tb_Buku order by id_buku desc";
                adapter.SelectCommand = new SqlCommand(sql, koneksi);
                adapter.Fill(ds, "Buku");
                dv = new DataView();
                dv.Table = ds.Tables[0];
                dataGridView1.DataSource = dv;
                dataGridView2.DataSource = dv;
                dataGridView3.DataSource = dv;
                koneksi.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            finally
            {
                koneksi.Close();
            }
        }
        public void ambilkat()
        {
            koneksi = conn.con();
            koneksi.Open();
            SqlCommand command = new SqlCommand("SELECT * FROM tb_Kategori", koneksi);
            try
            {
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    ArrayList idkat = new ArrayList();
                    ArrayList idkat2 = new ArrayList();
                    idkat.Add(reader.GetString(0));
                    idkat2.Add(reader.GetString(1));
                    foreach (string s in idkat)
                    {
                        foreach (string s2 in idkat2)
                        {
                            cbxKategori.Items.Add(s2);
                            cbxKategori.SelectedIndex = 0;
                        }
                    }
                }
                koneksi.Close();
            }
            catch (Exception)
            {
                MessageBox.Show("Gagal");
            }
            finally
            {
                koneksi.Close();
            }
        }
           
        public void ambilrak()
        {
            koneksi = conn.con();
            koneksi.Open();
            SqlCommand command = new SqlCommand("SELECT * FROM tb_Rak", koneksi);
            try
            {
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    ArrayList idkat = new ArrayList();
                    ArrayList idkat2 = new ArrayList();
                    idkat.Add(reader.GetString(0));
                    idkat2.Add(reader.GetString(1));
                    foreach (string s in idkat)
                    {
                        foreach (string s2 in idkat2)
                        {
                        cbxNamaRak.Items.Add(s2);
                        cbxNamaRak.SelectedIndex = 0;
                        }
                    }
                }
                koneksi.Close();
            }
            catch (Exception)
            {
                MessageBox.Show("Gagal");
            }
            finally
            {
                koneksi.Close();
            }
        }

        public void ambilkatedit()
        {
            koneksi = conn.con();
            koneksi.Open();
            SqlCommand command = new SqlCommand("SELECT * FROM tb_Kategori", koneksi);
            try
            {
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    ArrayList idkat3 = new ArrayList();
                    ArrayList idkat4 = new ArrayList();
                    idkat3.Add(reader.GetString(0));
                    idkat4.Add(reader.GetString(1));
                    foreach (string s in idkat3)
                    {
                        foreach (string s2 in idkat4)
                        {
                            cbxKategori_edit.Items.Add(s2);
                           cbxKategori_edit.SelectedIndex = 0;
                        }
                    }
                }
                koneksi.Close();
            }
            catch (Exception)
            {
                MessageBox.Show("Gagal");
            }
            finally
            {
                koneksi.Close();
            }
        }

        public void ambilrakedit()
        {
            koneksi = conn.con();
            koneksi.Open();
            SqlCommand command = new SqlCommand("SELECT * FROM tb_Rak", koneksi);
            try
            {
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    ArrayList idkat = new ArrayList();
                    ArrayList idkat2 = new ArrayList();
                    idkat.Add(reader.GetString(0));
                    idkat2.Add(reader.GetString(1));
                    foreach (string s in idkat)
                    {
                        foreach (string s2 in idkat2)
                        {
                            cbxRak_edit.Items.Add(s2);
                            cbxRak_edit.SelectedIndex = 0;
                        }
                    }
                }
                koneksi.Close();
            }
            catch (Exception)
            {
                MessageBox.Show("Gagal");
            }
            finally
            {
                koneksi.Close();
            }
        }
        public void hapusedit()
        {
            txtkatbuku_edit.Text = "";
            idkatbuku_edit.Text = "";
            txtkatbuku_edit.Enabled = false;
            idkatbuku_edit.Enabled = true;
            tglTerbit_edit.Enabled = false;
            btncari_edit.Enabled = true;
            btnedit.Enabled = false;
            btnbatal_edit.Enabled = false;
        }
        public void hapusedit1()
        {
            txtkatbuku_edit.Enabled = true;
            idkatbuku_edit.Enabled = false;
            btncari_edit.Enabled = false;
            btnbatal_edit.Enabled = true;
            btnedit.Enabled = true;
        }


        private void btn_Simpan_Click(object sender, EventArgs e)
        {
                String j_buku = txtJudul_Buku.Text;
                String pengarang = txtPengarang.Text;
                String penerbit = txtPenerbit.Text;
                String jml_hal = txtJmlh_Hal.Text;
                String des_singkat = txtDeskripsi.Text;
                String tgl_terbit = tglTerbit.Text;
                String stok = txtStokTB.Text;

                Regex reg = new Regex(@"^[A-Z a-z]+$");
                Match match_huruf = reg.Match(pengarang);
                Match match_huruf1 = reg.Match(des_singkat);
                Regex reg1 = new Regex(@"^[0-9]+$");
                Match match_angka = reg1.Match(jml_hal);
                Regex reg2 = new Regex(@"^[0-9]+$");
                Match match_angka1 = reg2.Match(stok);

                if (j_buku == "")
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtJudul_Buku, "Judul Buku Tidak Boleh Kosong!");
                    var warning = MessageBox.Show("Judul Buku Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }

                }

                else if (pengarang == "")
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtPengarang, "Nama Pengarang Tidak Boleh Kosong!");
                    var warning = MessageBox.Show("Nama Pengarang Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }

                }
                else if (penerbit == "")
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtPenerbit, "Penerbit Tidak Boleh Kosong!");
                    var warning = MessageBox.Show("Penerbit Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }

                }
                else if (jml_hal == "")
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtJmlh_Hal, "Jumlah Halaman Tidak Boleh Kosong!");
                    var warning = MessageBox.Show("Jumlah Halaman Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }

                }
                else if (!match_angka.Success)
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtJmlh_Hal, "Jumlah Halaman Harus Berupa Angka!");
                    var warning = MessageBox.Show("Jumlah Halaman Harus Berupa Angka!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }
                }
                else if (cbxBahasa.SelectedIndex == 0)
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(cbxBahasa, "Bahasa Harus Dipilih!");
                    var warning = MessageBox.Show("Bahasa Harus Dipilih!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }
                }
                else if (des_singkat == "")
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtDeskripsi, "Deskripsi Singkat Tidak Boleh Kosong!");
                    var warning = MessageBox.Show("Deskripsi Singkat Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }

                }
                else if (stok == "")
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtStokTB, "Jumlah Stok Tidak Boleh Kosong!");
                    var warning = MessageBox.Show("Jumlah Stok Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }

                }
                else if (!match_angka1.Success)
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtStokTB, "Jumlah Stok Buku Harus Berupa Angka!");
                    var warning = MessageBox.Show("Jumlah Stok Buku Harus Berupa Angka!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }
                }

                else
                {
                    koneksi = conn.con();
                    SqlCommand command = new SqlCommand("insert into tb_Buku (id_buku, judul_buku, pengarang, penerbit, jumlah_halaman, bahasa, deskripsi_singkat, id_rak, id_kategori, tgl_terbit, stok) values ('" + txtId_Buku.Text + "','" + txtJudul_Buku.Text + "','" + txtPengarang.Text + "','" + txtPenerbit.Text + "','" + txtJmlh_Hal.Text + "','" + cbxBahasa.SelectedItem + "','" + txtDeskripsi.Text + "','" + label45.Text + "','" + label46.Text + "','" + tglTerbit.Text + "','" + txtStokTB.Text + "' );", koneksi);
                    adapter = new SqlDataAdapter("select b.id_buku, b.judul_buku, b.pengarang, b.penerbit, b.jumlah_halaman, b.bahasa, b.deskripsi_singkat, r.nama_rak, k.kategori_buku from tb_Buku b join tb_Rak r on b.id_rak = r.id_rak join tb_Kategori k on b.id_kategori = k.id_kategori where b.id_rak = r.id_rak order by id_buku desc", koneksi);
                    DataTable dtBuku = new DataTable();
                    koneksi.Open();
                    command.ExecuteNonQuery();
                    dataGridView1.DataSource = dtBuku;
                    dataGridView2.DataSource = dtBuku;
                    dataGridView3.DataSource = dtBuku;
                    adapter.SelectCommand.ExecuteNonQuery();
                    adapter.Fill(dtBuku);
                    MessageBox.Show("Data Success Added");
                    errorProvider1.Clear();
                    hapus();
                    AutoGeneratedID buku = new AutoGeneratedID();
                    string bukuu = buku.AutoIDBuku();
                    txtId_Buku.Text = bukuu;
                    txtId_Buku.Enabled = false;
                }
        }

        public void hapus()
        {
            txtJudul_Buku.Text = ("");
            txtPengarang.Text = ("");
            txtPenerbit.Text = ("");
            txtJmlh_Hal.Text = ("");
            cbxBahasa.SelectedIndex = (0);
            txtDeskripsi.Text = ("");
            cbxNamaRak.SelectedIndex = (0);
            cbxKategori.SelectedIndex = (0);
            txtStokTB.Text = ("");


        }

        public void hapus_edit()
        {
            //txtJBuku_edit.Enabled = false;
            //txtPengarang_edit.Enabled = false;
            //txtPenerbit_edit.Enabled = false;
            //txtHal_edit.Enabled = false;
            //cbxKategori_edit.Enabled = false;
            //cbxBahasa_edit.Enabled = false;
            //txtDes_edit.Enabled = false;
            //txtStok_Edit.Enabled = false;
            //cbxBahasa_edit.Enabled = false;
            //cbxRak_edit.Enabled = false;
            txt_IDBuku_edit.Enabled = true;
            button3.Enabled = true;
            txt_IDBuku_edit.Text = "";
            txtJBuku_edit.Text = "";
            txtPengarang_edit.Text = "";
            txtPenerbit_edit.Text = "";
            txtHal_edit.Text = "";
            cbxBahasa_edit.SelectedItem = 0;
            txtDes_edit.Text = "";
            cbxRak_edit.SelectedItem = 0;
            cbxKategori_edit.SelectedItem = 0;
            tglTerbit_edit.Text = "";
            txtStok_Edit.Text = "";

        }

        public void reset_edit_buku()
        {
 
        }

        public void hapus_TKB()
        {
            txtKatBuk.Text = ("");
        }

        private void Btn_Hapus_Click(object sender, EventArgs e)
        {
            hapus();
        }

        private void tabPage3_Click(object sender, EventArgs e)
        {

        }

        private void cbxBahasa_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void btn_edit_Click(object sender, EventArgs e)
        {
            
        string id = txt_IDBuku_edit.Text;
        string jb = txtJBuku_edit.Text;
        string pg = txtPengarang_edit.Text;
        string pt = txtPenerbit_edit.Text;
        string jl = txtHal_edit.Text;
        string bhs = cbxBahasa_edit.SelectedItem.ToString();
        string des = txtDes_edit.Text;
        string idr = label47.Text;
        string ktgr = label48.Text;
        string tgl_tbt = tglTerbit_edit.Text;
        string stk = txtStok_Edit.Text;
                    koneksi = conn.con();
                    koneksi.Open();
                    var peringatan = MessageBox.Show("Apakah Anda Ingin Benar-Benar Mengubah Data Ini!", "Peringatan", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (peringatan == DialogResult.Yes)
                    {
                        try
                        {
                            SqlCommand sqlupdate = new SqlCommand("update tb_Buku set judul_buku = @jb, pengarang = @pg, penerbit = @pt, jumlah_halaman = @jl, bahasa = @bhs, deskripsi_singkat = @des, id_rak = @idr, id_kategori = @ktgr, tgl_terbit = @tgl_tbt, stok = @stk where id_buku = @id", koneksi);
                            using (sqlupdate)
                            {
                                sqlupdate.Parameters.AddWithValue("@jb", jb);
                                sqlupdate.Parameters.AddWithValue("@pg", pg);
                                sqlupdate.Parameters.AddWithValue("@pt", pt);
                                sqlupdate.Parameters.AddWithValue("@jl", jl);
                                sqlupdate.Parameters.AddWithValue("@bhs", bhs);
                                sqlupdate.Parameters.AddWithValue("@des", des);
                                sqlupdate.Parameters.AddWithValue("@idr", idr);
                                sqlupdate.Parameters.AddWithValue("@ktgr", ktgr);
                                sqlupdate.Parameters.AddWithValue("@tgl_tbt", tgl_tbt);
                                sqlupdate.Parameters.AddWithValue("@stk", stk);
                                sqlupdate.Parameters.AddWithValue("@id", id);
                                int result = sqlupdate.ExecuteNonQuery();
                                if (result != 0)
                                {

                                    adapter = new SqlDataAdapter("select * from tb_Buku order by id_buku desc", koneksi);
                                    DataTable dtBuku = new DataTable();
                                    sqlupdate.ExecuteNonQuery();
                                    dataGridView1.DataSource = dtBuku;
                                    dataGridView2.DataSource = dtBuku;
                                    dataGridView3.DataSource = dtBuku;
                                    adapter.SelectCommand.ExecuteNonQuery();
                                    adapter.Fill(dtBuku);
                                    MessageBox.Show("Data Sukses Diupdate");
                                    hapus_edit();
                                    koneksi.Close();
                                }
                                else
                                {
                                    MessageBox.Show("Data Member Gagal Diubah!");
                                }
                            }
                        }
                        catch (SqlException ex)
                        {
                            MessageBox.Show(ex.ToString());
                        }
                        finally
                        {
                            koneksi.Close();
                        }
                    }
                }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            MenuUtama mu = new MenuUtama();
            mu.Show();
            this.Hide();
        }

        private void txtId_Buku_TextChanged(object sender, EventArgs e)
        {

        }

        private void tabPage4_Click(object sender, EventArgs e)
        {
        }

        private void tabPage1_Click(object sender, EventArgs e)
        {

        }

        private void tglTerbit_edit_ValueChanged(object sender, EventArgs e)
        {

        }

        private void tabPage2_Click(object sender, EventArgs e)
        {

        }

        private void btnHapus_edit_Click(object sender, EventArgs e)
        {
            hapus_edit();
        }

        private void btnSimpanTKB_Click(object sender, EventArgs e)
        {
            try
            {
                String kategori = txtKatBuk.Text;

                Regex reg = new Regex(@"^[A-Z a-z]+$");
                Match match_huruf = reg.Match(kategori);

                if (kategori == "")
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtKatBuk, "Kategori Tidak Boleh Kosong!");
                    var warning = MessageBox.Show("Kategori Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }
                }
                else
                {
                    koneksi = conn.con();
                    SqlCommand sqltambah = new SqlCommand("Insert into tb_Kategori (id_kategori, kategori_buku) values ('" + txtIDKatBuk.Text + "','" + txtKatBuk.Text + "');", koneksi);
                    koneksi.Open();
                    sqltambah.ExecuteNonQuery();
                    MessageBox.Show("Data Success Added");
                    koneksi.Close();
                    AutoGeneratedID autoid = new AutoGeneratedID();
                    string id_kategori = autoid.AutoIDKategoriBuku();
                    txtIDKatBuk.Text = id_kategori;
                    txtIDKatBuk.ReadOnly = true;
                    cbxKategori.Items.Clear();
                    Buku_Load(sender, e);
                    errorProvider1.Clear();
                    hapus_TKB();
                }
            }
            catch (SqlException se)
            {
                MessageBox.Show(se.Message);
            }
        }
        private void btncari_edit_Click(object sender, EventArgs e)
        {

            SqlParameter sqlP;

            koneksi = conn.con();
            koneksi.Open();
            String id_kat_buku_edit = idkatbuku_edit.Text;
            if (id_kat_buku_edit == "")
            {
                errorProvider1.Clear();
                errorProvider1.SetError(idkatbuku_edit, "ID Kategori Buku Tidak Boleh Kosong!");
                var warning = MessageBox.Show("ID Kategori Buku Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                if (warning == DialogResult.Cancel)
                {
                    hapus();
                    errorProvider1.Clear();
                }
            }
            else
            {
                SqlCommand command = new SqlCommand("SELECT * FROM tb_Kategori WHERE id_kategori = @id_kat_buku_edit", koneksi);
                sqlP = command.Parameters.Add("@id_kat_buku_edit", SqlDbType.VarChar, 15);
                sqlP.Value = id_kat_buku_edit;
                try
                {
                    SqlDataReader reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        txtkatbuku_edit.Text = reader[1].ToString();
                        hapusedit1();
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Gagal");
                }
                finally
                {
                    koneksi.Close();
                }
            }
        }

        private void btnedit_Click(object sender, EventArgs e)
        {
            string id = idkatbuku_edit.Text;
            string kat = txtkatbuku_edit.Text;
            koneksi = conn.con();
            koneksi.Open();
            var peringatan = MessageBox.Show("Apakah Anda Ingin Benar-Benar Mengubah Data Ini!", "Peringatan", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (peringatan == DialogResult.Yes)
            {
                try
                {
                    SqlCommand sqlupdate = new SqlCommand("update tb_Kategori set kategori_buku = @kat where id_kategori = @id", koneksi);
                    using (sqlupdate)
                    {
                        sqlupdate.Parameters.AddWithValue("@kat", kat);
                        sqlupdate.Parameters.AddWithValue("@id", id);
                        int result = sqlupdate.ExecuteNonQuery();
                        if (result != 0)
                        {
                            MessageBox.Show("Data Kategori Buku Berhasil Diubah!");
                            hapusedit();
                            cbxKategori.Items.Clear();
                            Buku_Load(sender, e);
                        }
                        else
                        {
                            MessageBox.Show("Data Admin Gagal Diubah!");
                        }
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Gagal");
                }
                finally
                {
                    koneksi.Close();
                }
            }

        }

        private void btnbatal_edit_Click(object sender, EventArgs e)
        {
            hapusedit();
        }
        public void hapus_kat1()
        {
            textidkat_hapus.Enabled = false;
            txtkat_hapus.Enabled = false;
            btncarikat_hapus.Enabled = false;
            btnkat_hapus.Enabled = true;
            btnbatal_hapus.Enabled = true;
        }
        public void hapus_kat()
        {
            textidkat_hapus.Enabled = true;
            txtkat_hapus.Enabled = false;
            btncarikat_hapus.Enabled = true;
            btnkat_hapus.Enabled = false;
            btnbatal_hapus.Enabled = false;
            textidkat_hapus.Text = "";
            txtkat_hapus.Text = "";
        }
        private void btncarikat_hapus_Click(object sender, EventArgs e)
        {
            SqlParameter sqlP;
            koneksi = conn.con();
            koneksi.Open();
            String id_kathapus = textidkat_hapus.Text;
            if (id_kathapus == "")
            {
                errorProvider1.Clear();
                errorProvider1.SetError(textidkat_hapus, "ID Kategori Buku Tidak Boleh Kosong!");
                var warning = MessageBox.Show("ID Kategori Buku Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                if (warning == DialogResult.Cancel)
                {
                    hapus();
                    errorProvider1.Clear();
                }
            }
            else
            {
                SqlCommand command = new SqlCommand("SELECT * FROM tb_Kategori WHERE id_kategori = @id_kathapus", koneksi);
                sqlP = command.Parameters.Add("@id_kathapus", SqlDbType.VarChar, 15);
                sqlP.Value = id_kathapus;
                try
                {
                    SqlDataReader reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        txtkat_hapus.Text = reader[1].ToString();
                        hapus_kat1();
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Gagal");
                }
                finally
                {
                    koneksi.Close();
                }
            }
        }

        private void tabPage5_Click(object sender, EventArgs e)
        {
        }

        private void tabPage6_Click(object sender, EventArgs e)
        {
        }

        private void btnbatal_hapus_Click(object sender, EventArgs e)
        {
            hapus_kat();
        }

        private void btnkat_hapus_Click(object sender, EventArgs e)
        {
            koneksi = conn.con();
            koneksi.Open();
            String id_kat = textidkat_hapus.Text;
            string kat = txtkat_hapus.Text;
            var peringatan = MessageBox.Show("Apakah Anda Ingin Benar-Benar Menghapus Data Ini!", "Peringatan", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (peringatan == DialogResult.Yes)
            {
                SqlCommand sqldelete = new SqlCommand("delete from tb_Kategori WHERE id_kategori = @id_kat", koneksi);
                using (sqldelete)
                {
                    sqldelete.Parameters.AddWithValue("@kat", kat);
                    sqldelete.Parameters.AddWithValue("@id_kat", id_kat);
                    int result = sqldelete.ExecuteNonQuery();
                    if (result != 0)
                    {
                        MessageBox.Show("Data Member Berhasil Dihapus!");
                        hapus_kat();
                        cbxKategori.Items.Clear();
                        Buku_Load(sender, e);
                    }
                    else
                    {
                        MessageBox.Show("Data Member Gagal Dihapus!");
                    }
                }
            }
        }

        private void button10_Click(object sender, EventArgs e)
        {
            try
            {
                String rak = txtNamRakBuk.Text;

                if (rak == "")
                {
                    errorProvider1.Clear();
                    errorProvider1.SetError(txtKatBuk, "Rak Tidak Boleh Kosong!");
                    var warning = MessageBox.Show("Kategori Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                    if (warning == DialogResult.Cancel)
                    {
                        hapus();
                        errorProvider1.Clear();
                    }
                }
                else
                {
                    koneksi = conn.con();
                    SqlCommand sqltambah = new SqlCommand("Insert into tb_Rak (id_rak, nama_rak) values ('" + txtIDRakBuk.Text + "','" + txtNamRakBuk.Text + "');", koneksi);
                    koneksi.Open();
                    sqltambah.ExecuteNonQuery();
                    MessageBox.Show("Data Sukses Ditambah!");
                    koneksi.Close();
                    AutoGeneratedID autoid = new AutoGeneratedID();
                    string id_kategori = autoid.AutoIDKategoriBuku();
                    txtIDKatBuk.Text = id_kategori;
                    txtIDKatBuk.ReadOnly = true;
                    errorProvider1.Clear();
                    hapus_TKB();
                    cbxNamaRak.Items.Clear();
                    Buku_Load(sender, e);
                }
            }
            catch (SqlException se)
            {
                MessageBox.Show(se.Message);
            }
        }

        private void button12_Click(object sender, EventArgs e)
        {
            string id = textBox12.Text;
            string rak = textBox11.Text;
            koneksi = conn.con();
            koneksi.Open();
            var peringatan = MessageBox.Show("Apakah Anda Ingin Benar-Benar Mengubah Data Ini!", "Peringatan", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (peringatan == DialogResult.Yes)
            {
                try
                {
                    SqlCommand sqlupdate = new SqlCommand("update tb_Rak set nama_rak = @rak where id_rak = @id", koneksi);
                    using (sqlupdate)
                    {
                        sqlupdate.Parameters.AddWithValue("@rak", rak);
                        sqlupdate.Parameters.AddWithValue("@id", id);
                        int result = sqlupdate.ExecuteNonQuery();
                        if (result != 0)
                        {
                            MessageBox.Show("Data Rak Buku Berhasil Diubah!");
                            textBox12.Enabled = true;
                            textBox11.Enabled = false;
                            button11.Enabled = false;
                            button12.Enabled = false;
                            button14.Enabled = true;
                            textBox12.Text = "";
                            textBox11.Text = "";
                            cbxNamaRak.Items.Clear();
                            Buku_Load(sender, e);
                        }
                        else
                        {
                            MessageBox.Show("Data Rak Buku Gagal Diubah!");
                        }
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Gagal");
                }
                finally
                {
                    koneksi.Close();
                }
            }
        }

        private void button14_Click(object sender, EventArgs e)
        {
            SqlParameter sqlP;

            koneksi = conn.con();
            koneksi.Open();
            String id_rak_buku_edit = textBox12.Text;
            if (id_rak_buku_edit == "")
            {
                errorProvider1.Clear();
                errorProvider1.SetError(textBox12, "ID Rak Buku Tidak Boleh Kosong!");
                var warning = MessageBox.Show("ID Rak Buku Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                if (warning == DialogResult.Cancel)
                {
                    hapus();
                    errorProvider1.Clear();
                }
            }
            else
            {
                SqlCommand command = new SqlCommand("SELECT * FROM tb_Rak WHERE id_rak = @id_rak_buku_edit", koneksi);
                sqlP = command.Parameters.Add("@id_rak_buku_edit", SqlDbType.VarChar, 15);
                sqlP.Value = id_rak_buku_edit;
                try
                {
                    SqlDataReader reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        textBox11.Text = reader[1].ToString();
                        textBox12.Enabled = false;
                        textBox11.Enabled = true;
                        button11.Enabled = true;
                        button12.Enabled = true;
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Gagal");
                }
                finally
                {
                    koneksi.Close();
                }
            }
        }

        private void button18_Click(object sender, EventArgs e)
        {
            SqlParameter sqlP;
            koneksi = conn.con();
            koneksi.Open();
            String id_rakhapus = textBox16.Text;
            if (id_rakhapus == "")
            {
                errorProvider1.Clear();
                errorProvider1.SetError(textBox16, "ID Rak Buku Tidak Boleh Kosong!");
                var warning = MessageBox.Show("ID Rak Buku Tidak Boleh Kosong!", "Perhatian", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                if (warning == DialogResult.Cancel)
                {
                    hapus();
                    errorProvider1.Clear();
                }
            }
            else
            {
                SqlCommand command = new SqlCommand("SELECT * FROM tb_Rak WHERE id_rak = @id_rakhapus", koneksi);
                sqlP = command.Parameters.Add("@id_rakhapus", SqlDbType.VarChar, 15);
                sqlP.Value = id_rakhapus;
                try
                {
                    SqlDataReader reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        textBox15.Text = reader[1].ToString();
                        button20.Enabled = true;
                        button19.Enabled = true;
                        button18.Enabled = false;
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Gagal");
                }
                finally
                {
                    koneksi.Close();
                }
            }
        }


        private void button20_Click(object sender, EventArgs e)
        {
            koneksi = conn.con();
            koneksi.Open();
            String id_rak = textBox16.Text;
            string rak = textBox15.Text;
            var peringatan = MessageBox.Show("Apakah Anda Ingin Benar-Benar Menghapus Data Ini!", "Peringatan", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (peringatan == DialogResult.Yes)
            {
                SqlCommand sqldelete = new SqlCommand("delete from tb_Rak WHERE id_rak = @id_rak", koneksi);
                using (sqldelete)
                {
                    sqldelete.Parameters.AddWithValue("@rak", rak);
                    sqldelete.Parameters.AddWithValue("@id_rak", id_rak);
                    int result = sqldelete.ExecuteNonQuery();
                    if (result != 0)
                    {
                        MessageBox.Show("Data Member Berhasil Dihapus!");
                        textBox15.Text = "";
                        textBox16.Text = "";
                        button20.Enabled = false;
                        button19.Enabled = false;
                        button18.Enabled = true;
                        cbxNamaRak.Items.Clear();
                        Buku_Load(sender, e);
                    }
                    else
                    {
                        MessageBox.Show("Data Member Gagal Dihapus!");
                    }
                }
            }
        }

        private void button19_Click(object sender, EventArgs e)
        {
            textBox15.Text = "";
            textBox16.Text = "";
            button20.Enabled = false;
            button19.Enabled = false;
            button18.Enabled = true;
        }

        private void cbxKategori_SelectedIndexChanged(object sender, EventArgs e)
        {
            cekidkat();
        }

        private void dataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void button11_Click(object sender, EventArgs e)
        {
            textBox11.Text = "";
            textBox12.Text = "";
            button12.Enabled = false;
            button11.Enabled = false;
            button14.Enabled = true;
        }

        private void button9_Click(object sender, EventArgs e)
        {
            txtNamRakBuk.Text = "";
        }

        public void hapusbuku()
        {
            txtIDBuku_hapus.Text = "";
            txtNamaRak_hapusbuku.Text = "";
            txtJBuku_hapus.Text = "";
            txtNamaRak_hapusbuku.Enabled = false;
            txtJBuku_hapus.Enabled = false;
        }


        private void button6_Click(object sender, EventArgs e)
        {
            
            SqlParameter sqlP;

            koneksi = conn.con();
            koneksi.Open();
            String id_buku = txtIDBuku_hapus.Text;
            SqlCommand command = new SqlCommand("SELECT * FROM tb_Buku WHERE id_buku = @id_buku", koneksi);
            sqlP = command.Parameters.Add("@id_buku", SqlDbType.VarChar, 15);
            sqlP.Value = id_buku;
            try
            {
                SqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    button6.Enabled = false;
                    txtIDBuku_hapus.Enabled = false;

                    txtIDBuku_hapus.Text = reader[0].ToString();
                    txtNamaRak_hapusbuku.Text = reader [7].ToString();
                    txtJBuku_hapus.Text = reader[1].ToString();
                    try
                    {
                        koneksi = conn.con();
                        koneksi.Open();
                        SqlCommand sqlcari = new SqlCommand("select * from tb_Buku", koneksi);
                        sqlcari = new SqlCommand(sql, koneksi);
                        adapter.SelectCommand = sqlcari;
                        adapter.Fill(ds, "Sort DataView");
                        adapter.Dispose();
                        sqlcari.Dispose();
                        koneksi.Close();

                        dv = new DataView(ds.Tables[0], "id_buku = '" + txtIDBuku_hapus.Text + "'","id_buku", DataViewRowState.CurrentRows);

                        dataGridView3.DataSource = dv;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.ToString());
                    }
                    finally
                    {
                        koneksi.Close();
                    }
                }
                else
                {
                    MessageBox.Show("Buku Tidak Ditemukan!");
                    hapusbuku();
                
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Gagal");
            }
            finally
            {
                koneksi.Close();
            }
            /*  try
        {
            SqlDataReader reader = command.ExecuteReader();
            if (reader.Read())
            {
                txt_IDBuku_edit.Text = reader[0].ToString();
                txtJBuku_edit.Text = reader[1].ToString();
                txtPengarang_edit.Text = reader[2].ToString();
                txtPenerbit_edit.Text = reader[3].ToString();
                txtHal_edit.Text = reader[4].ToString();
                cbxBahasa_edit.SelectedItem = reader[5].ToString();
                txtDes_edit.Text = reader[6].ToString();
                cbxRak_edit.SelectedItem = reader[7].ToString();
                cbxKategori_edit.SelectedItem = reader[8].ToString();
                tglTerbit_edit.Text = reader[9].ToString();
                txtStok_Edit.Text = reader[10].ToString();
            }
            else
            {
                MessageBox.Show("Buku Tidak Ditemukan!");
            }
        }
        catch (Exception )
        {
            MessageBox.Show("Gagal");
        }
        finally
        {
            koneksi.Close();
        }*/
        }

        private void button8_Click(object sender, EventArgs e)
        {
        
        koneksi = conn.con();
        koneksi.Open();
        String id_buku = txtIDBuku_hapus.Text;
        string rak = txtNamaRak_hapusbuku.Text;
        string judul = txtJBuku_hapus.Text;
        var peringatan = MessageBox.Show("Apakah Anda Ingin Benar-Benar Menghapus Data Ini!", "Peringatan", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        if (peringatan == DialogResult.Yes)
        {
            SqlCommand sqldelete = new SqlCommand("delete from tb_Buku WHERE id_buku = @id_buku", koneksi);
            using (sqldelete)
            {
                sqldelete.Parameters.AddWithValue("@judul_buku", judul);
                sqldelete.Parameters.AddWithValue("@nama_rak", rak);
                sqldelete.Parameters.AddWithValue("@id_buku", id_buku);
                int result = sqldelete.ExecuteNonQuery();
                if (result != 0)
                {
                    adapter = new SqlDataAdapter("select * from tb_Buku order by id_buku desc", koneksi);
                    DataTable dtMember = new DataTable();
                    sqldelete.ExecuteNonQuery();
                    dataGridView1.DataSource = dtMember;
                    dataGridView2.DataSource = dtMember;
                    dataGridView3.DataSource = dtMember;
                    adapter.SelectCommand.ExecuteNonQuery();
                    adapter.Fill(dtMember);
                    MessageBox.Show("Data Member Berhasil Dihapus!");
                    koneksi.Close(); 
                    AutoGeneratedID buku1 = new AutoGeneratedID();
                    string katbuku = buku1.AutoIDBuku();
                    txtId_Buku.Text = katbuku;
                    button6.Enabled = true;
                    txtIDBuku_hapus.Enabled = true;
                    hapusbuku();
                }
                else
                {
                    MessageBox.Show("Data Member Gagal Dihapus!");
                }
            }
        }
        }

         public void edit()
         {
              txt_IDBuku_edit.Enabled = false;
              txtJBuku_edit.Enabled = true;
              txtPengarang_edit.Enabled = true;
              txtPenerbit_edit.Enabled = true;
              txtHal_edit.Enabled = true;
              cbxBahasa_edit.Enabled = true;
              txtDes_edit.Enabled = true;
              cbxRak_edit.Enabled = true;
              cbxKategori_edit.Enabled = true;
              tglTerbit_edit.Enabled = true;
              txtStok_Edit.Enabled = true;
              button3.Enabled = false;
         }

        private void button3_Click(object sender, EventArgs e)
        {
        cekidkatedit();
        cekidrakedit();
            SqlParameter sqlP;
            koneksi = conn.con();
            koneksi.Open();
            String id_buku = txt_IDBuku_edit.Text;
            SqlCommand command = new SqlCommand("SELECT * FROM tb_Buku WHERE id_buku = @id_buku", koneksi); 
            sqlP = command.Parameters.Add("@id_buku", SqlDbType.VarChar, 15);
            sqlP.Value = id_buku;
            try
        {
            SqlDataReader reader = command.ExecuteReader();
            if (reader.Read())
            {
                txt_IDBuku_edit.Text = reader[0].ToString();
                txtJBuku_edit.Text = reader[1].ToString();
                txtPengarang_edit.Text = reader[2].ToString();
                txtPenerbit_edit.Text = reader[3].ToString();
                txtHal_edit.Text = reader[4].ToString();
                cbxBahasa_edit.SelectedItem = reader[5].ToString();
                txtDes_edit.Text = reader[6].ToString();
                label47.Text = reader[7].ToString();
                label48.Text = reader[8].ToString();
                tglTerbit_edit.Text = reader[9].ToString();
                txtStok_Edit.Text = reader[10].ToString();
            }
            else
            {
                MessageBox.Show("Buku Tidak Ditemukan!");
            }
        }
        catch (Exception )
        {
            MessageBox.Show("Gagal");
        }
        finally
        {
            koneksi.Close();
        }
            edit();
        }

        private void button7_Click(object sender, EventArgs e)
        {
            button6.Enabled = true;
            txtIDBuku_hapus.Enabled = true;
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            DataSet ds1 = new DataSet();
            string sql1 = null;
            hapusbuku();
            try
            {
                koneksi = conn.con();
                koneksi.Open();
                DataView dv1;
                sql1 = "Select * from tb_Buku order by id_buku desc";
                adapter1.SelectCommand = new SqlCommand(sql1, koneksi);
                adapter1.Fill(ds1, "Buku");
                dv1 = new DataView();
                dv1.Table = ds1.Tables[0];
                dataGridView3.DataSource = dv1;
                koneksi.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            finally
            {
                koneksi.Close();
            }
        }

        private void cbxNamaRak_SelectedIndexChanged(object sender, EventArgs e)
        {
            cekidrak();
        }

        private void cekidrak()
        {
            SqlParameter sqlP;

            koneksi = conn.con();
            koneksi.Open();
            string id_rak = cbxNamaRak.SelectedItem.ToString();
            SqlCommand command = new SqlCommand("SELECT * FROM tb_Rak WHERE nama_rak = @id_rak", koneksi);
            sqlP = command.Parameters.Add("@id_rak", SqlDbType.VarChar, 15);
            sqlP.Value = id_rak;
            SqlDataReader reader = command.ExecuteReader();
            while (reader.Read())
            {
                label45.Text = reader[0].ToString();
            }
            koneksi.Close();
        }
        private void cekidkat()
        {
            SqlParameter sqlP;

            koneksi = conn.con();
            koneksi.Open();
            string id_kat = cbxKategori.SelectedItem.ToString();
            SqlCommand command = new SqlCommand("SELECT * FROM tb_Kategori WHERE kategori_buku = @id_kat", koneksi);
            sqlP = command.Parameters.Add("@id_kat", SqlDbType.VarChar, 15);
            sqlP.Value = id_kat;
            SqlDataReader reader = command.ExecuteReader();
            while (reader.Read())
            {
                label46.Text = reader[0].ToString();
            }
            koneksi.Close();
        }

        private void cekidrakedit()
        {
            SqlParameter sqlP1;

            koneksi = conn.con();
            koneksi.Open();
            string id_rak = cbxRak_edit.SelectedItem.ToString();
            SqlCommand command1 = new SqlCommand("SELECT * FROM tb_Rak WHERE nama_rak = @id_rak", koneksi);
            sqlP1 = command1.Parameters.Add("@id_rak", SqlDbType.VarChar, 15);
            sqlP1.Value = id_rak;
            SqlDataReader reader1 = command1.ExecuteReader();
            while (reader1.Read())
            {
                label47.Text = reader1[0].ToString();
            }
            koneksi.Close();
        }
        private void cekidkatedit()
        {
            SqlParameter sqlP2;

            koneksi = conn.con();
            koneksi.Open();
            string id_kat1 = cbxKategori_edit.SelectedItem.ToString();
            SqlCommand command2 = new SqlCommand("SELECT * FROM tb_Kategori WHERE kategori_buku = @id_kat1", koneksi);
            sqlP2 = command2.Parameters.Add("@id_kat1", SqlDbType.VarChar, 15);
            sqlP2.Value = id_kat1;
            SqlDataReader reader2 = command2.ExecuteReader();
            while (reader2.Read())
            {
                label48.Text = reader2[0].ToString();
            }
            koneksi.Close();
        }

        private void cbxRak_edit_SelectedIndexChanged(object sender, EventArgs e)
        {
            cekidrakedit();
        }

        private void cbxKategori_edit_SelectedIndexChanged(object sender, EventArgs e)
        {
            cekidkatedit();
        }

        private void txt_IDBuku_edit_TextChanged(object sender, EventArgs e)
        {

        }

        //private void label47_Click(object sender, EventArgs e)
        //{

        //}
     }
}
